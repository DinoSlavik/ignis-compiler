import subprocess
import os
import glob
import sys

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
# –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
EXAMPLES_DIR = "examples"
# –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è –±—ñ–Ω–∞—Ä–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
BIN_DIR = os.path.join(EXAMPLES_DIR, "bin")
# –®–ª—è—Ö –¥–æ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞
COMPILER_PATH = os.path.join("ignis", "main.py")
# –ö–æ–ª—ñ—Ä –¥–ª—è –≤–∏–≤–æ–¥—É
GREEN = "\033[92m"
RED = "\033[91m"
YELLOW = "\033[93m"
RESET = "\033[0m"

TESTS_TO_EXCLUDE = [
    "test_strings",
    "test_errors",
    "test_advanced_checker"
]


def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å, –∫–æ–º–ø—ñ–ª—é—î —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –≤—Å—ñ .ign —Ç–µ—Å—Ç–∏.
    """
    print(f"{YELLOW}--- –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞ Ignis ---{RESET}\n")

    # 1. –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä —ñ—Å–Ω—É—î
    if not os.path.exists(COMPILER_PATH):
        print(f"{RED}–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä –∑–∞ —à–ª—è—Ö–æ–º '{COMPILER_PATH}'.{RESET}")
        sys.exit(1)

    # 2. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ .ign
    test_files_raw = glob.glob(os.path.join(EXAMPLES_DIR, "*.ign"))
    if not test_files_raw:
        print(f"{RED}–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ .ign —Ñ–∞–π–ª—É –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó '{EXAMPLES_DIR}'.{RESET}")
        sys.exit(1)

    # 3. –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –±—ñ–Ω–∞—Ä–Ω–∏–∫—ñ–≤, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    os.makedirs(BIN_DIR, exist_ok=True)

    test_files = []

    for ign_file in test_files_raw:
        base_name = os.path.splitext(os.path.basename(ign_file))[0]
        if base_name not in TESTS_TO_EXCLUDE:
            test_files.append(ign_file)

    # 4. –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–∂–Ω–æ–º—É —Ñ–∞–π–ª—É, –∫–æ–º–ø—ñ–ª—é—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ
    for ign_file in sorted(test_files):
        try:
            # –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É –±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è (–Ω–∞–ø—Ä., "test_memmanag")
            base_name = os.path.splitext(os.path.basename(ign_file))[0]

            # –ü–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –±—ñ–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª—É
            executable_path = os.path.join(BIN_DIR, base_name)

            # --- –ï—Ç–∞–ø –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó ---
            print(f"[*] –ö–æ–º–ø—ñ–ª—é—î–º–æ: {ign_file}")
            compile_command = [
                sys.executable,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python
                COMPILER_PATH,
                "-k",  # –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø—Ä–æ–º—ñ–∂–Ω—ñ —Ñ–∞–π–ª–∏
                "-o", executable_path,
                ign_file,
                "--target=cpp"
            ]

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä
            subprocess.run(compile_command, check=True, capture_output=True, text=True)
            print(f"{GREEN}[‚úì] –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!{RESET}\n")

            # --- –ï—Ç–∞–ø –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ---
            print(f"[*] –ó–∞–ø—É—Å–∫–∞—î–º–æ: {executable_path}")

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω–∏–π —Ñ–∞–π–ª
            run_result = subprocess.run([executable_path], check=True, capture_output=True, text=True)
            print(f"{GREEN}[‚úì] –í–∏–∫–æ–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!{RESET}")

            # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∏
            if run_result.stdout:
                print("--- –í–∏–≤—ñ–¥ –ø—Ä–æ–≥—Ä–∞–º–∏ ---")
                print(run_result.stdout.strip())
                print("----------------------\n")

        except subprocess.CalledProcessError as e:
            # –Ø–∫—â–æ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—è –∞–±–æ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
            print(f"\n{RED}!!! –ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª—ñ: {ign_file} !!!{RESET}")
            #if "–ö–æ–º–ø—ñ–ª—é—î–º–æ" in e.args[0]:  # Heuristic to check if it was compile time
            if 1 == e.args[0]:  # Heuristic to check if it was compile time
                print(f"{RED}–ï—Ç–∞–ø: –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è{RESET}")
            else:
                print(f"{RED}–ï—Ç–∞–ø: –í–∏–∫–æ–Ω–∞–Ω–Ω—è{RESET}")

            # –í–∏–≤–æ–¥–∏–º–æ stderr, —â–æ–± –±—É–ª–æ –∑—Ä–æ–∑—É–º—ñ–ª–æ, —â–æ –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫
            print(f"\n--- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É ---")
            print(e.stderr)
            print("--------------------------------\n")
            sys.exit(1)  # –ó—É–ø–∏–Ω—è—î–º–æ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å

    print(f"\n{GREEN}======================================")
    print(f"üéâ –í—Å—ñ {len(test_files)} —Ç–µ—Å—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ! üéâ")
    print(f"======================================{RESET}")


if __name__ == "__main__":
    main()